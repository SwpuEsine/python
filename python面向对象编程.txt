class Student(object):

    def __init__(self, name, score):
        self.name = name
        self.score = score

    def print_score(self):
        print('%s: %s' % (self.name, self.score))
		
		

bart = Student('Bart Simpson', 59)
lisa = Student('Lisa Simpson', 87)
bart.print_score()
lisa.print_score()


class Student(object):
    pass
	
	
	class后面紧接着是类名，即Student，类名通常是大写开头的单词，紧接着是(object)，
	
	表示该类是从哪个类继承下来的，继承的概念我们后面再讲，通常，
	如果没有合适的继承类，就使用object类，这是所有类最终都会继承的类。
	
	
	创建实例是通过类名+()实现的：
	
	>>> bart = Student()
>>> bart
<__main__.Student object at 0x10a67a590>
>>> Student
<class '__main__.Student'>


class Student(object):

    def __init__(self, name, score):
        self.name = name
        self.score = score

注意到__init__方法的第一个参数永远是self，表示创建的实例本身，因此，在__init__方法内部，
就可以把各种属性绑定到self，因为self就指向创建的实例本身。

有了__init__方法，在创建实例的时候，就不能传入空的参数了，
必须传入与__init__方法匹配的参数，但self不需要传，Python解释器自己会把实例变量传进去：

>>> bart = Student('Bart Simpson', 59)
>>> bart.name
'Bart Simpson'
>>> bart.score
59


但是，既然Student实例本身就拥有这些数据，要访问这些数据，
就没有必要从外面的函数去访问，可以直接在Student类的内部定义访问数据的函数，
这样，就把“数据”给封装起来了。
这些封装数据的函数是和Student类本身是关联起来的，我们称之为类的方法：


class Student(object):

    def __init__(self, name, score):
        self.name = name
        self.score = score

    def print_score(self):
        print('%s: %s' % (self.name, self.score))

