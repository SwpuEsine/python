错误处理

在操作系统提供的调用中，返回错误码非常常见。
比如打开文件的函数open()，成功时返回文件描述符（就是一个整数），出错时返回-1


try:
    print('try...')
    r = 10 / 0
    print('result:', r)
except ZeroDivisionError as e:
    print('except:', e)
finally:
    print('finally...')
print('END')


当我们认为某些代码可能会出错时，就可以用try来运行这段代码，如果执行出错，
则后续代码不会继续执行，而是直接跳转至错误处理代码，即except语句块，
执行完except后，如果有finally语句块，则执行finally语句块，至此，执行完毕。


此外，如果没有错误发生，可以在except语句块后面加一个else，当没有错误发生时，会自动执行else语句：


try:
    print('try...')
    r = 10 / int('2')
    print('result:', r)
except ValueError as e:
    print('ValueError:', e)
except ZeroDivisionError as e:
    print('ZeroDivisionError:', e)
else:
    print('no error!')
finally:
    print('finally...')
print('END')


------------------------------------------测试--------------------------------------------------

Python的错误其实也是class，所有的错误类型都继承自BaseException，所以在使用except时需要注意的是，
它不但捕获该类型的错误，还把其子类也“一网打尽”。比如：


try:
    foo()
except ValueError as e:
    print('ValueError')
except UnicodeError as e:
    print('UnicodeError')
	
	
第二个except永远也捕获不到UnicodeError，因为UnicodeError是ValueError的子类，如果有，也被第一个except给捕获了。

Python所有的错误都是从BaseException类派生的，常见的错误类型和继承关系看这里：



-------------------------------------调用堆栈---------------------------------------------------

如果错误没有被捕获，它就会一直往上抛，最后被Python解释器捕获，打印一个错误信息，然后程序退出。来看看err.py









--------------------------------------记录错误---------------------------------------------------

如果不捕获错误，自然可以让Python解释器来打印出错误堆栈，但程序也被结束了。既然我们能捕获错误，
就可以把错误堆栈打印出来，然后分析错误原因，同时，让程序继续执行下去。

Python内置的logging模块可以非常容易地记录错误信息：

import logging

def foo(s):
    return 10 / int(s)

def bar(s):
    return foo(s) * 2

def main():
    try:
        bar('0')
    except Exception as e:
        logging.exception(e)

main()
print('END')

同样是出错，但程序打印完错误信息后会继续执行，并正常退出：

---------------------------------------------抛出错误--------------------------------------

如果要抛出错误，首先根据需要，可以定义一个错误的class，选择好继承关系，然后，用raise语句抛出一个错误的实例：


try:
    10 / 0
except ZeroDivisionError:
    raise ValueError('input error!')
	
--------------------------------------------------------------------------------------------

def foo(s):
    n = int(s)
    if n==0:
        raise ValueError('invalid value: %s' % s)
    return 10 / n

def bar():
    try:
        foo('0')
    except ValueError as e:
        print('ValueError!')
        raise

bar()


/***************************************异常抛出***********************************************/

其实这种错误处理方式不但没病，而且相当常见。捕获错误目的只是记录一下，
便于后续追踪。但是，由于当前函数不知道应该怎么处理该错误，所以，最恰当的方式是继续往上抛，
让顶层调用者去处理。好比一个员工处理不了一个问题时，
就把问题抛给他的老板，如果他的老板也处理不了，就一直往上抛，最终会抛给CEO去处理。

