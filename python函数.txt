>>> a = abs # 变量a指向abs函数
>>> a(-1) # 所以也可以通过a调用abs函数
1

def my_abs(x):
    if x >= 0:
        return x
    else:
        return -x
如果想定义一个什么事也不做的空函数，可以用pass语句：

def nop():
    pass
	
	if age >= 18:
    pass
	
def my_abs(x):
    if not isinstance(x, (int, float)):
        raise TypeError('bad operand type')
    if x >= 0:
        return x
    else:
        return -x
	
	
import math

def move(x, y, step, angle=0):
    nx = x + step * math.cos(angle)
    ny = y - step * math.sin(angle)
    return nx, ny 
	
	
	但灵活度却非常大。除了正常定义的必选参数外，还可以使用默认参数、可变参数和关键字参数
	
	
	git reset head  表示把暂存区内容回退到工作区
	
	
	
从上面的例子可以看出，默认参数可以简化函数的调用。设置默认参数时，有几点要注意：

一是必选参数在前，默认参数在后，否则Python的解释器会报错（思考一下为什么默认参数不能放在必选参数前面）；

二是如何设置默认参数。

当函数有多个参数时，把变化大的参数放前面，变化小的参数放后面。变化小的参数就可以作为默认参数。


def power(x, n=2):
    s = 1
    while n > 0:
        n = n - 1
        s = s * x
    return s
	
	
	有多个默认参数时，调用的时候，既可以按顺序提供默认参数，比如调用enroll('Bob', 'M', 7)，
	意思是，除了name，gender这两个参数外，
	最后1个参数应用在参数age上，city参数由于没有提供，仍然使用默认值。
	
	也可以不按顺序提供部分默认参数。当不按顺序提供部分默认参数时，
	需要把参数名写上。比如调用enroll('Adam', 'M', city='Tianjin')，
	意思是，city参数用传进去的值，其他默认参数继续使用默认值。
	
	def add_end(L=[]):
    L.append('END')
    return L
	
	>>> add_end()
['END', 'END']
>>> add_end()
['END', 'END', 'END']
	
	Python函数在定义的时候，默认参数L的值就被计算出来了，即[]，
	因为默认参数L也是一个变量，它指向对象[]，每次调用该函数，如果改变了L的内容，
	则下次调用时，默认参数的内容就变了，不再是函数定义时的[]了。


	def add_end(L=None):
    if L is None:
        L = []
    L.append('END')
    return L
	
	为什么要设计str、None这样的不变对象呢？因为不变对象一旦创建，对象内部的数据就不能修改
	
	同时多线程读取不变对象的时候不用加锁
	def calc(*numbers):
    sum = 0
    for n in numbers:
        sum = sum + n * n
		
		定义可变参数对象
		
    return sum
	
	
	def calc(*numbers):
    sum = 0
    for n in numbers:
        sum = sum + n * n
    return sum
	
	
	>>> calc(1, 2)
5
>>> calc()
0


>>> nums = [1, 2, 3]
>>> calc(nums[0], nums[1], nums[2])
14

所以Python允许你在list或tuple前面加一个*号，把list或tuple的元素变成可变参数传进去：

>>> nums = [1, 2, 3]
>>> calc(*nums)
14

可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。


关键字参数

def person(name, age, **kw):
    print('name:', name, 'age:', age, 'other:', kw)
	
	
>>> person('Bob', 35, city='Beijing')
name: Bob age: 35 other: {'city': 'Beijing'}
>>> person('Adam', 45, gender='M', job='Engineer')
name: Adam age: 45 other: {'gender': 'M', 'job': 'Engineer'}



def person(name, age, **kw):
    if 'city' in kw:
        # 有city参数
        pass
    if 'job' in kw:
        # 有job参数
        pass
    print('name:', name, 'age:', age, 'other:', kw)
	
	
	
	def person(name, age, *, city, job):
    print(name, age, city, job)
	
	
	def person(name, age, *, city='Beijing', job):
    print(name, age, city, job)
	
	
	在Python中定义函数，可以用必选参数、默认参数、可变参数、关键字参数和命名关键字参数，
	这5种参数都可以组合使用。但是请注意，
	参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。
	
		def fact(n):
    if n==1:
        return 1
    return n * fact(n - 1)
	
	正向递归
解决递归调用栈溢出的方法是通过尾递归优化，事实上尾递归和循环的效果是一样的，所以，
把循环看成是一种特殊的尾递归函数也是可以的。
尾递归是指，在函数返回的时候，调用自身本身，并且，return语句不能包含表达式。
这样，编译器或者解释器就可以把尾递归做优化，
使递归本身无论调用多少次，都只占用一个栈帧，不会出现栈溢出的情况。




	