>>> d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}
>>> d['Michael']
95
由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉：

>>> d['Jack'] = 90
>>> d['Jack']
90
>>> d['Jack'] = 88
>>> d['Jack']
88

如果Key不存在 就会报错  避免报错 

要避免key不存在的错误，有两种办法，一是通过in判断key是否存在：

>>> 'Thomas' in d
False

二是通过dict提供的get方法，如果key不存在，可以返回None，或者自己指定的value：
>>> d.get('Thomas')
>>> d.get('Thomas', -1)
-1

>>> d.pop('Bob')
75
>>> d
{'Michael': 95, 'Tracy': 85}


查找和插入的速度极快，不会随着key的增加而变慢；
需要占用大量的内存，内存浪费多。

要保证hash的正确性，作为key的对象就不能变。在Python中，字符串、整数等都是不可变的，
因此，可以放心地作为key。而list是可变的，就不能作为key：

需要牢记的第一条就是dict的key必须是不可变对象


set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。

要创建一个set，需要提供一个list作为输入集合：

>>> s = set([1, 2, 3])
>>> s
{1, 2, 3}

注意，传入的参数[1, 2, 3]是一个list，
而显示的{1, 2, 3}只是告诉你这个set内部有1，2，3这3个元素，
显示的顺序也不表示set是有序的。。

add(key) s.remove(4)

set可以看成数学意义上的无序和无重复元素的集合，
因此，两个set可以做数学意义上的交集、并集等操作：

>>> s1 = set([1, 2, 3])
>>> s2 = set([2, 3, 4])
>>> s1 & s2
{2, 3}
>>> s1 | s2
{1, 2, 3, 4}


