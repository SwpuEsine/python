
通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，
列表容量肯定是有限的。而且，创建一个包含100万个元素的列表，
不仅占用很大的存储空间，
如果我们仅仅需要访问前面几个元素，
那后面绝大多数元素占用的空间都白白浪费了。


在Python中，这种一边循环一边计算的机制，称为生成器：generator。

要创建一个generator，有很多种方法。第一种方法很简单，只要把一个列表生成式的[]改成()，就创建了一个generator：

>>> L = [x * x for x in range(10)]
>>> L
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
>>> g = (x * x for x in range(10))
>>> g
<generator object <genexpr> at 0x1022ef630>

>>> next(g)
0

>>> g = (x * x for x in range(10))
>>> for n in g:
...     print(n)


比如，著名的斐波拉契数列（Fibonacci），除第一个和第二个数外，任意一个数都可由前两个数相加得到：

1, 1, 2, 3, 5, 8, 13, 21, 34, ...


a, b = b, a + b


t = (b, a + b) # t是一个tuple
a = t[0]
b = t[1]


这就是定义generator的另一种方法。如果一个函数定义中包含yield关键字，
那么这个函数就不再是一个普通函数，而是一个generator：


>>> f = fib(6)
>>> f
<generator object fib at 0x104feaaa0>


这里，最难理解的就是generator和函数的执行流程不一样。函数是顺序执行，
遇到return语句或者最后一行函数语句就返回。而变成generator的函数，
在每次调用next()的时候执行，
遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。
那么这个函数就不再是一个普通函数，而是一个generator：
--------------------------------------------可迭代对象------------------------------------------------
可以使用isinstance()判断一个对象是否是Iterable对象：
>>> from collections import Iterable
>>> isinstance([], Iterable)
True
>>> isinstance({}, Iterable)
True
>>> isinstance('abc', Iterable)
True
>>> isinstance((x for x in range(10)), Iterable)
True
>>> isinstance(100, Iterable)
False


我们已经知道，可以直接作用于for循环的数据类型有以下几种：

一类是集合数据类型，如list、tuple、dict、set、str等；

一类是generator，包括生成器和带yield的generator function。

这些可以直接作用于for循环的对象统称为可迭代对象：Iterable。

可以使用isinstance()判断一个对象是否是Iterable对象：

可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator。


生成器都是Iterator对象，但list、dict、str虽然是Iterable，却不是Iterator。


>>> isinstance(iter([]), Iterator)
True
>>> isinstance(iter('abc'), Iterator)
True

